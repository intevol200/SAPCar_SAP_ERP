*&---------------------------------------------------------------------*
*& Include          ZBDC34_CUST_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form toolbar_pros
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_OBJECT
*&      --> E_INTERACTIVE
*&---------------------------------------------------------------------*
FORM toolbar_pros  USING  p_object TYPE REF TO cl_alv_event_toolbar_set
                           p_interactive TYPE char01.

  DATA: ls_toolbar TYPE stb_button,
        lines      TYPE i.
*--------------------------------------------------------------------*

  MOVE 3               TO ls_toolbar-butn_type.
  APPEND ls_toolbar    TO p_object->mt_toolbar.
  CLEAR  ls_toolbar.
  MOVE 'UPDL'          TO ls_toolbar-function.
  MOVE icon_xxl TO ls_toolbar-icon.
  ls_toolbar-quickinfo = 'Excel Upload'.
  ls_toolbar-text      = 'Excel Upload'.
  APPEND ls_toolbar    TO p_object->mt_toolbar.
  CLEAR ls_toolbar.

  MOVE 3               TO ls_toolbar-butn_type.
  APPEND ls_toolbar    TO p_object->mt_toolbar.
  CLEAR  ls_toolbar.
  MOVE 'BDC'          TO ls_toolbar-function.
  MOVE icon_insert_favorites TO ls_toolbar-icon.
  ls_toolbar-quickinfo = 'Cust BDC'.
  ls_toolbar-text      = 'Cust BDC'.
  APPEND ls_toolbar    TO p_object->mt_toolbar.
  CLEAR ls_toolbar.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form user_command_pros
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM user_command_pros  USING    pv_ucomm.

  CASE pv_ucomm.
    WHEN 'UPDL'.

      PERFORM excel_data_upload.
      PERFORM alv_refresh.

    WHEN 'BDC'.

      PERFORM check_excel.
      CHECK gv_subrc EQ 0.
      PERFORM cust_bdcdata.
      PERFORM alv_refresh.


  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form EXCEL_DATA_UPLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM excel_data_upload .
  TYPES: BEGIN OF lty_zt34_cust,
           custno TYPE c LENGTH 10,
           drnum  TYPE c LENGTH 15,
           cname  TYPE c LENGTH 25,
           gesch  TYPE c LENGTH 5,
           phone  TYPE c LENGTH 30,
           state  TYPE c LENGTH 5,
           city   TYPE c LENGTH 25,
           street TYPE c LENGTH 30,
           sdate  TYPE c LENGTH 10,
         END OF lty_zt34_cust.

  DATA: lt_filetab   TYPE filetable,
        lv_rc        TYPE i,
        lv_filename  TYPE rlgrap-filename,
        ls_excel     TYPE lty_zt34_cust,
*        LT_EXCEL     LIKE TABLE OF LS_EXCEL,
        lt_excel     TYPE TABLE OF lty_zt34_cust,
        lt_row_data  TYPE truxs_t_text_data,
        itabname(28).

  DATA: ls_disp   LIKE LINE OF gt_disp,
        lt_gesch  TYPE dd07v_tab,
        lt_state  TYPE dd07v_tab.

  FIELD-SYMBOLS: <lfs_struc>,
                 <lfs_tab> TYPE STANDARD TABLE.
*--------------------------------------------------------------------*

  CLEAR: gt_disp.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    CHANGING
      file_table = lt_filetab
      rc         = lv_rc
    EXCEPTIONS
      OTHERS     = 1.

  IF sy-subrc EQ 0.

    READ TABLE lt_filetab INTO lv_filename INDEX 1.

    IF lv_filename = space.
      lv_filename = 'C:\'.
    ENDIF.
  ENDIF..
  CHECK lv_filename IS NOT INITIAL.

  itabname = 'LT_EXCEL'.

  ASSIGN LOCAL COPY OF (itabname) TO <lfs_tab>.

  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
      i_field_seperator    = 'X'
      i_line_header        = 'X'
      i_tab_raw_data       = lt_row_data
      i_filename           = lv_filename
    TABLES
      i_tab_converted_data = lt_excel
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.

  CHECK lt_excel IS NOT INITIAL.

  PERFORM get_cust_info CHANGING gt_disp.
  PERFORM get_dom_value USING 'GESCH'   CHANGING lt_gesch.
  PERFORM get_dom_value USING 'ZD34_STATE'  CHANGING lt_state.

  LOOP AT lt_excel INTO ls_excel.

*    REPLACE ALL OCCURRENCES OF ',' IN ls_excel-price WITH space.
*
*    MOVE-CORRESPONDING ls_excel TO ls_disp.
*    CALL FUNCTION 'CURRENCY_AMOUNT_IDOC_TO_SAP'
*      EXPORTING
*        currency    = ls_disp-waers
*        idoc_amount = ls_disp-price
*      IMPORTING
*        sap_amount  = ls_disp-price.

    PERFORM check_error USING gt_disp lt_gesch lt_state
                        CHANGING ls_disp.

    APPEND ls_disp TO gt_disp.

  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_CUST_INFO
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- GT_DISP
*&---------------------------------------------------------------------*
FORM get_cust_info  CHANGING pt_disp LIKE gt_disp.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE pt_disp
    FROM zt34_cust.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_dom_value
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      <-- LT_FUEL
*&---------------------------------------------------------------------*
FORM get_dom_value  USING    VALUE(PV_DOMNAME)
                    CHANGING CT_TAB TYPE DD07V_TAB.

  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      DOMNAME    = PV_DOMNAME
    TABLES
      VALUES_TAB = CT_TAB.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_error
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GT_DISP
*&      --> LT_GESCH
*&      --> LT_STATE
*&      <-- LS_DISP
*&---------------------------------------------------------------------*
FORM check_error  USING VALUE(PT_CUST) LIKE GT_DISP
                        VALUE(PT_GESCH) TYPE DD07V_TAB
                        VALUE(PT_STATE) TYPE DD07V_TAB
                  CHANGING CS_DISP LIKE LINE OF GT_DISP.

  DATA: LS_CUST  LIKE LINE OF GT_DISP,
        LS_VALUE LIKE LINE OF PT_GESCH.
*--------------------------------------------------------------------*

  CLEAR: GV_SUBRC.

  IF CS_DISP-CUSTNO IS INITIAL  OR CS_DISP-DRNUM IS INITIAL OR
     CS_DISP-CNAME  IS INITIAL  OR CS_DISP-GESCH  IS INITIAL OR
     CS_DISP-PHONE IS INITIAL  OR CS_DISP-STATE IS INITIAL OR
     CS_DISP-CITY  IS INITIAL  OR CS_DISP-STREET IS INITIAL OR
     CS_DISP-SDATE IS INITIAL.

    GV_SUBRC = 4.
    CS_DISP-LIGHT = 1.
    CS_DISP-MSG = 'An empty value exists, please check.'.

    EXIT.

  ENDIF.

  CHECK GV_SUBRC EQ 0.

  READ TABLE PT_CUST INTO LS_CUST WITH KEY CUSTNO = CS_DISP-CUSTNO.

  IF SY-SUBRC EQ 0.

    GV_SUBRC = 4.
    CS_DISP-LIGHT = 1.
    CS_DISP-MSG = 'Cust number is duplicated.'.
    EXIT.

  ELSEIF SY-SUBRC NE 0.

    READ TABLE PT_GESCH INTO LS_VALUE WITH KEY DOMVALUE_L = CS_DISP-GESCH.

    IF SY-SUBRC NE 0.

      GV_SUBRC = 4.
      CS_DISP-LIGHT = 1.
      CS_DISP-MSG = 'Gesch type does not exist'.
      RETURN.

    ELSE.
      READ TABLE PT_STATE INTO LS_VALUE WITH KEY DOMVALUE_L = CS_DISP-STATE.
      IF SY-SUBRC NE 0.

        GV_SUBRC = 4.
        CS_DISP-LIGHT = 1.
        CS_DISP-MSG = 'State type does not exist'.
        RETURN.

      ELSE.

            CS_DISP-LIGHT = 3.
            CS_DISP-MSG = 'No Error'.

      ENDIF.

    ENDIF.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form alv_refresh
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_refresh .
  DATA: LV_SCROLL TYPE LVC_S_STBL.
  DATA: LS_LAYOUT  TYPE LVC_S_LAYO.         "ALV ###
*--------------------------------------------------------------------*

  CHECK GO_ALV IS NOT INITIAL.
  LV_SCROLL-ROW = 'X'.
  LV_SCROLL-COL = 'X'.

  CALL METHOD GO_ALV->GET_FRONTEND_LAYOUT
    IMPORTING
      ES_LAYOUT = LS_LAYOUT.

  LS_LAYOUT-CWIDTH_OPT = 'X'.

  CALL METHOD GO_ALV->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = LS_LAYOUT.

  CALL METHOD GO_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      I_SOFT_REFRESH = ''
      IS_STABLE      = LV_SCROLL.     "## ### ### refresh
ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM check_excel .
  CHECK GV_SUBRC NE 0.
  MESSAGE I016(PN) WITH 'There is an error in the excel data, please check.' DISPLAY LIKE 'E'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form cust_bdcdata
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM cust_bdcdata .
  DATA: LV_MODE   TYPE RFPDO-ALLGAZMD VALUE 'N',
        LV_UPDATE TYPE C LENGTH 1 VALUE 'S',
        LV_MSG    TYPE C LENGTH 100,
        LV_PRICE  TYPE C LENGTH 15.

  DATA: LS_DISP   TYPE GTY_DISP.

*--------------------------------------------------------------------*

  LOOP AT GT_DISP INTO LS_DISP.

    CLEAR: BDCDATA, MESSTAB, LV_MSG.
**  'X'#  ### ##  '####'   '####'
** ### char# ### #####.
*    WRITE LS_DISP-PRICE  CURRENCY LS_DISP-WAERS TO LV_PRICE.

    PERFORM DYNPRO USING : 'X'  'ZR34_CUST03'    '0100',
                           ' '   'BDC_OKCODE'      '=CREATE',

                           'X'  'ZM34_CUST01'    '0100',
                           ' '   'BDC_OKCODE'      '=SAVE',
                           ' '   'GS_CUST-DRNUM'    LS_DISP-DRNUM,
                           ' '   'GS_CUST-CNAME'     LS_DISP-CNAME,
                           ' '   'GS_CUST-GESCH'     LS_DISP-GESCH,
                           ' '   'GS_CUST-PHONE'    LS_DISP-PHONE,
                           ' '   'GS_CUST-STATE'    LS_DISP-STATE,
                           ' '   'GS_CUST-CITY'     LS_DISP-CITY,
                           ' '   'GS_CUST-STREET'   LS_DISP-STREET,

                           'X'   'ZM34_CUST01'   '0100',
                           ' '   'BDC_OKCODE'     '/EEXIT',

                           'X'  'ZR34_CUST03'    '0100',
                           ' '   'BDC_OKCODE'     '=BACK'.


    CALL TRANSACTION 'ZM34_CUST03' USING BDCDATA
                         MODE LV_MODE
                         UPDATE LV_UPDATE
                         MESSAGES INTO MESSTAB.

    IF SY-SUBRC NE 0.
      CALL FUNCTION 'RKC_MSG_STRING'
        EXPORTING
          ID      = SY-MSGID
          MTYPE   = SY-MSGTY
          NUMBER  = SY-MSGNO
          PAR1    = SY-MSGV1
          PAR2    = SY-MSGV2
          PAR3    = SY-MSGV3
          PAR4    = SY-MSGV4
        IMPORTING
          MSG_LIN = LV_MSG.

*      LS_DISP-DFLAG = 'E'.  "### error# dflag# 'E'##
      LS_DISP-MSG = LV_MSG.
    ELSE.
      LS_DISP-MSG = 'SUCCESS'.
    ENDIF.

    MODIFY GT_DISP FROM LS_DISP.

  ENDLOOP.

  MESSAGE I016(PN) WITH 'DATA SAVE SUCCESS' DISPLAY LIKE 'S'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DYNPRO
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM dynpro USING   A  B  C.

  IF A = 'X'.
    GS_BDCDATA-DYNBEGIN = A.
    GS_BDCDATA-PROGRAM = B.
    GS_BDCDATA-DYNPRO = C.
  ELSE.
    GS_BDCDATA-FNAM = B.
    GS_BDCDATA-FVAL = C.
  ENDIF.

  APPEND GS_BDCDATA TO BDCDATA.
  CLEAR GS_BDCDATA.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_ALV_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_alv_0100 .
  CREATE OBJECT GO_CON
    EXPORTING
      CONTAINER_NAME = 'CUSTCON'.

  CREATE OBJECT GO_ALV
    EXPORTING
      I_PARENT = GO_CON.
*      I_SHELLSTYLE = WS_THICKFRAME.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_LAYO0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- GS_LAYO
*&---------------------------------------------------------------------*
FORM set_layo0100  CHANGING CS_LAYO TYPE LVC_S_LAYO.
  CS_LAYO-CWIDTH_OPT = 'X'.
  CS_LAYO-EXCP_FNAME = 'LIGHT'.
  CS_LAYO-EXCP_LED = 'X'.
  CS_LAYO-INFO_FNAME = 'COLOR'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_FCAT0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- GT_FCAT
*&---------------------------------------------------------------------*
FORM set_fcat0100 CHANGING CT_FCAT LIKE GT_FCAT.
  DATA: LS_FCAT LIKE LINE OF GT_FCAT.
*--------------------------------------------------------------------*

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'LIGHT'.
  LS_FCAT-COLTEXT   = 'Status'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'MSG'.
  LS_FCAT-COLTEXT   = 'MESSAGE'.
  LS_FCAT-COL_POS   = '11'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'DFLAG'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'ERDAT'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'ERZET'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'ERNAM'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'AEDAT'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'AEZET'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.

  CLEAR: LS_FCAT.
  LS_FCAT-FIELDNAME = 'AENAM'.
  LS_FCAT-NO_OUT = 'X'.

  APPEND LS_FCAT TO CT_FCAT.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form EVENT_HANDLER_REGISTER
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GO_ALV
*&---------------------------------------------------------------------*
FORM event_handler_register USING LO_GRID TYPE REF TO CL_GUI_ALV_GRID.
*- ALV Event Handler
  CREATE OBJECT GO_ALV_EVENT_HANDLER.

  SET HANDLER GO_ALV_EVENT_HANDLER->HANDLE_TOOLBAR      FOR LO_GRID.
  SET HANDLER GO_ALV_EVENT_HANDLER->HANDLE_USER_COMMAND FOR LO_GRID.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_0101
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_0101 .


  CALL METHOD GO_ALV->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      I_STRUCTURE_NAME              = 'ZT34_CUST'
      IS_LAYOUT                     = GS_LAYO
    CHANGING
      IT_OUTTAB                     = GT_DISP
      IT_FIELDCATALOG               = GT_FCAT
      IT_SORT                       = GT_SORT
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

------------------------------------------
- 20210910 Extracted by ### @ Hynix <BR> User Name:  CL-A-27 <BR> System:  KYS <BR> HOST:  edu <BR> SAP Release  754 <BR>
